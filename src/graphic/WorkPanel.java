/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package graphic;

import java.awt.Color;
import java.awt.Graphics;

/**
 *
 * @author Alexander Schmitz
 */
public class WorkPanel extends javax.swing.JPanel {

    private Document doc;
    
    private boolean objectSelected;
    private int zIndexOfselectedObject;
    private DocObject selectedObject;
    private boolean objectDragged;
    private int relXPos;
    private int relYPos;
    private boolean rightHandleDragged;
    private boolean leftHandleDragged;
    private boolean topHandleDragged;
    private boolean bottomHandleDragged;
    private boolean rightTopHandleDragged;
    private boolean leftTopHandleDragged;
    private boolean rightBottomHandleDragged;
    private boolean leftBottomHandleDragged;
    private boolean directionHandleDragged;
    
    /**
     * Creates new form WorkPanel
     */
    public WorkPanel() {
        initComponents();
        
        this.doc = new Document();
        
        this.doc.addObject(new Area(130, 120, 100, 200, 0.2, Color.RED));
        this.doc.addObject(new Area(200, 250, 50, 50, 0.5, Color.GREEN));
        this.doc.addObject(new Area(300, 300, 60, 90, 0.0, Color.BLUE));
    }
    
    @Override
    public void paint(Graphics g) {
        super.paint(g);
        this.doc.draw(g);
        
        if (this.objectSelected) {
            this.selectedObject.drawSelectFrame(g);
        }
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1326, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 882, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if (this.doc.isThereAnObject(evt.getX(), evt.getY())) {
            this.objectSelected = true;
            this.zIndexOfselectedObject = this.doc.getZIndexOfObject(evt.getX(), evt.getY());
            this.selectedObject = this.doc.getObject(this.zIndexOfselectedObject);
        }
        else {
            this.objectSelected = false;
        }
        this.repaint();
    }//GEN-LAST:event_formMouseClicked

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if (this.rightHandleDragged) {
            ((Area) this.selectedObject).setRightHandle(evt.getX(), evt.getY());
            this.repaint();
        } else if (this.leftHandleDragged) {
            ((Area) this.selectedObject).setLeftHandle(evt.getX(), evt.getY());
            this.repaint();
        } else if (this.topHandleDragged) {
            ((Area) this.selectedObject).setTopHandle(evt.getX(), evt.getY());
            this.repaint();
        } else if (this.bottomHandleDragged) {
            ((Area) this.selectedObject).setBottomHandle(evt.getX(), evt.getY());
            this.repaint();
        } else if (this.rightTopHandleDragged) {
            ((Area) this.selectedObject).setRightTopHandle(evt.getX(), evt.getY());
            this.repaint();
        } else if (this.leftTopHandleDragged) {
            ((Area) this.selectedObject).setLeftTopHandle(evt.getX(), evt.getY());
            this.repaint();
        } else if (this.rightBottomHandleDragged) {
            ((Area) this.selectedObject).setRightBottomHandle(evt.getX(), evt.getY());
            this.repaint();
        } else if (this.leftBottomHandleDragged) {
            ((Area) this.selectedObject).setLeftBottomHandle(evt.getX(), evt.getY());
            this.repaint();
        } else if (this.directionHandleDragged) {
            ((Area) this.selectedObject).setDirectionHandle(evt.getX(), evt.getY());
            this.repaint();
        } else if (this.objectDragged) {
            this.selectedObject.setX(evt.getX() - this.relXPos);
            this.selectedObject.setY(evt.getY() - this.relYPos);
            this.repaint(); 
        }
    }//GEN-LAST:event_formMouseDragged

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        if (this.objectSelected && ((Area) this.selectedObject).isOverRightHandle(evt.getX(), evt.getY())) {
            this.rightHandleDragged = true;
        } else if (this.objectSelected && ((Area) this.selectedObject).isOverLeftHandle(evt.getX(), evt.getY())) {
            this.leftHandleDragged = true;
        } else if (this.objectSelected && ((Area) this.selectedObject).isOverTopHandle(evt.getX(), evt.getY())) {
            this.topHandleDragged = true;
        } else if (this.objectSelected && ((Area) this.selectedObject).isOverBottomHandle(evt.getX(), evt.getY())) {
            this.bottomHandleDragged = true;
        } else if (this.objectSelected && ((Area) this.selectedObject).isOverRightTopHandle(evt.getX(), evt.getY())) {
            this.rightTopHandleDragged = true;
        } else if (this.objectSelected && ((Area) this.selectedObject).isOverLeftTopHandle(evt.getX(), evt.getY())) {
            this.leftTopHandleDragged = true;
        } else if (this.objectSelected && ((Area) this.selectedObject).isOverRightBottomHandle(evt.getX(), evt.getY())) {
            this.rightBottomHandleDragged = true;
        } else if (this.objectSelected && ((Area) this.selectedObject).isOverLeftBottomHandle(evt.getX(), evt.getY())) {
            this.leftBottomHandleDragged = true;
        } else if (this.objectSelected && ((Area) this.selectedObject).isOverDirectionHandle(evt.getX(), evt.getY())) {
            this.directionHandleDragged = true;
        } else if (this.doc.isThereAnObject(evt.getX(), evt.getY())) {
            this.objectSelected = true;
            this.zIndexOfselectedObject = this.doc.getZIndexOfObject(evt.getX(), evt.getY());
            this.selectedObject = this.doc.getObject(this.zIndexOfselectedObject);
            
            this.objectDragged = true;
            this.relXPos = evt.getX() - this.selectedObject.getX();
            this.relYPos = evt.getY() - this.selectedObject.getY();
        } else {
            this.objectSelected = false;
        }
        this.repaint();
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        this.objectDragged = false;
        this.rightHandleDragged = false;
        this.leftHandleDragged = false;
        this.topHandleDragged = false;
        this.bottomHandleDragged = false;
        this.rightTopHandleDragged = false;
        this.leftTopHandleDragged = false;
        this.rightBottomHandleDragged = false;
        this.leftBottomHandleDragged = false;
        this.directionHandleDragged = false;
    }//GEN-LAST:event_formMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
